{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.AspNetCore": "Information",
      "Microsoft.Hosting.Lifetime": "Information",
      "Yarp": "Trace" // Debug, Information, Warning, Error, Critical, Trace
    }
  },
  "ApplicationInsights": {
    //"ConnectionString": "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://{region}.in.applicationinsights.azure.com/;LiveEndpoint=https://{region}.livediagnostics.monitor.azure.com/"
    "ConnectionString": "InstrumentationKey=aa6f1f95-6869-4e6a-8ceb-ecb1ead6b856;IngestionEndpoint=https://eastus-8.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus.livediagnostics.monitor.azure.com/"
  },
  "AllowedHosts": "*",
  // Configuration for the SFYarpProxy service
  "RemoteConfigDiscovery": {
    "ExternalDiscoveryServiceNames": "fabric:/YarpProxyApp/FabricDiscovery"
  },
  // YarpProxy configuration https://microsoft.github.io/reverse-proxy/articles/config-files.html
  // Base URLs the server listens on, must be configured independently of the routes below
  "Urls": "http://localhost:19082;https://localhost:443",
  "ReverseProxy": {
    // Routes tell the proxy which requests to forward
    "Routes": {
      "minimumroute": {
        // Matches /Explorer and routes it to www.example.com
        "ClusterId": "minimumcluster",
        "Match": {
          "Path": "/Explorer/{**remainder}"
        }
      },
      "allrouteprops": {
        // matches /something/* and routes to "allclusterprops"
        "ClusterId": "allclusterprops", // Name of one of the clusters
        "Order": 100, // Lower numbers have higher precedence
        "MaxRequestBodySize": 1000000, // In bytes. An optional override of the server's limit (30MB default). Set to -1 to disable.
        "Authorization Policy": "Anonymous", // Name of the policy or "Default", "Anonymous"
        "CorsPolicy": "Disable", // Name of the CorsPolicy to apply to this route or "Default", "Disable"
        "Match": {
          // "Path": "/Explorer/{**remainder}", // The path to match using ASP.NET syntax. 
          "Path": "/{**catchall}",
          // "Hosts": [
          //   "https://localhost:19080"
          //   // "www.aaaaa.com",
          //   // "www.bbbbb.com"
          // ], // The host names to match, unspecified is any
          "Methods": [
            "GET",
            "PUT"
          ] //, // The HTTP methods that match, unspecified is all
          // "Headers": [ // The headers to match, unspecified is any
          //   {
          //     "Name": "MyCustomHeader", // Name of the header
          //     "Values": [
          //       "value1",
          //       "value2",
          //       "another value"
          //     ], // Matches are against any of these values
          //     "Mode": "ExactHeader", // or "HeaderPrefix", "Exists" , "Contains", "NotContains"
          //     "IsCaseSensitive": true
          //   }
          // ],
          // "QueryParameters": [ // The query parameters to match, unspecified is any
          //   {
          //     "Name": "MyQueryParameter", // Name of the query parameter
          //     "Values": [
          //       "value1",
          //       "value2",
          //       "another value"
          //     ], // Matches are against any of these values
          //     "Mode": "Exact", // or "Prefix", "Exists" , "Contains", "NotContains"
          //     "IsCaseSensitive": true
          //   }
          // ]
        },
        "MetaData": { // List of key value pairs that can be used by custom extensions
          "MyName": "MyValue"
        },
        "Transforms": [ // List of transforms. See the Transforms article for more details
          {
            "RequestHeader": "MyHeader",
            "Set": "MyValue",
          }
        ]
      }
    },
    // Clusters tell the proxy where and how to forward requests
    "Clusters": {
      "minimumcluster": {
        "Destinations": {
          "first_destination": {
            "Address": "https://localhost:19080"
          }
        }
      },
      "allclusterprops": {
        // "Destinations": {
        //   "first_destination": {
        //     "Address": "https://contoso.com"
        //   },
        //   "another_destination": {
        //     "Address": "https://10.20.30.40",
        //     "Health": "https://10.20.30.40:12345/test" // override for active health checks
        //   }
        // },
        "LoadBalancingPolicy": "PowerOfTwoChoices", // Alternatively "FirstAlphabetical", "Random", "RoundRobin", "LeastRequests"
        "SessionAffinity": {
          "AffinityKeyName": "SessionAffinity", // Defaults to "Yarp.SessionAffinity
          "Enabled": true, // Defaults to 'false'
          "Policy": "Cookie", // Default, alternatively "CustomHeader"
          "FailurePolicy": "Redistribute", // default, Alternatively "Return503Error"
          "Settings": {
            "CustomHeaderName": "X-Yarp-Proxy-Affinity" // Defaults to 'X-Yarp-Proxy-Affinity`
          }
        },
        // "HealthCheck": {
        //   "Active": { // Makes API calls to validate the health. 
        //     "Enabled": "true",
        //     "Interval": "00:00:10",
        //     "Timeout": "00:00:10",
        //     "Policy": "ConsecutiveFailures",
        //     "Path": "/api/health" // API endpoint to query for health state
        //   }//,
        //   // "Passive": { // Disables destinations based on HTTP response codes
        //   //   "Enabled": true, // Defaults to false
        //   //   "Policy": "TransportFailureRateHealthPolicy", // Required
        //   //   "ReactivationPeriod": "00:00:10" // 10s
        //   // }
        // },
        "HttpClient": { // Configuration of HttpClient instance used to contact destinations
          "SSLProtocols": [
            "Tls12",
            "Tls13"
          ],
          "DangerousAcceptAnyServerCertificate": true, // Defaults to false
          "MaxConnectionsPerServer": 1024,
          "EnableMultipleHttp2Connections": true,
          "RequestHeaderEncoding": "Latin1" // How to interpret non ASCII characters in header values
        },
        "HttpRequest": { // Options for sending request to destination
          "ActivityTimeout": "00:02:00",
          "Version": "2",
          "VersionPolicy": "RequestVersionOrLower",
          "AllowResponseBuffering": "false"
        },
        // "Destinations": {
        //   "first_destination": {
        //     "Address": "https://localhost:19080"
        //   }
        // },
        // "WebProxy": { // Optional proxy to use for outgoing requests
        //   "Address": "http://localhost:8888",
        //   "BypassOnLocal": true,
        //   "UseDefaultCredentials": false //,
        //   // "Username": "username",
        //   // "Password": "password"
        // },
        "MetaData": { // Custom Key value pairs
          "TransportFailureRateHealthPolicy.RateLimit": "0.5", // Used by Passive health policy
          "MyKey": "MyValue"
        }
      }
    }
  }
}